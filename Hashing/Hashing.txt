An array is given a[]
Create a hash array(Frequency array) initializing it with 0;{Hash array size == Highest element of array a[]}
Do precalculation:
    In hash array every element is counting the same number in the main array a[]
        eg: if in a[] has two 1 then the hasharray[1] ==2

        So an iterator will go over a[] and for an element i it will point the hasharray[i] and increment it by 1


hash[1] == hasharray[1] == ans


But for character hashing it will not be a problem because there will be atmost 256 characters at that can be handeled by the array easily
But in case of number hashing the problem is within int() there at most we can take array[1e6] and globally array[1e7]
So if by number is about 1e9 then it will be a problem to create an array
To solve this we will use-
    1.STL (C++)--
        a.Map
        b. Unordered Map 
    2.Collection Framework--
        a.HashMap


MAP --> KEY VALUE PAIR

Key--->number
Value--> Frequency

if arr[] = {1,2,3,1,3,2,12}
For this in array hashing we have to take hash array of size 13

But in map,

map[2]--> checks the value of the key 2
So by it we are only staking up 1,2,3,12 

If we check map[4] then it will throw 0 but not store 4

For characte Hashing the map will be map<char, int>

in map storing and fetching---> O(log n) in all cases

But in unordered map it will be --> O(1)-Best case and avg case
                                    O(N)- Worst case(Very few)

First pref------->>unordered_map

If Time limit Exceeded shows then only switch to map

Why for unordered map the worst case time complexity goes O(N)?
Ans: Internal Collisions

Hashing is done by---> 1. Division Method
                        2. Folding Method
                        3. Mid Square Method
 


